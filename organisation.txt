test1-app/
├── src/
│   ├── app/
│   │   ├── layout.js
│   │   ├── page.js
│   │   ├── login/
│   │   │   └── page.js
│   │   ├── products/
│   │   │   └── page.js
│   │   ├── product/[id]/
│   │   │   └── page.js
│   │   ├── dashboard/
│   │   │   └── page.js
│   │   ├── api/
│   │   │   ├── auth/
│   │   │   │   └── route.js
│   │   │   ├── products/
│   │   │   │   └── route.js
│   │   ├── global-error.js
│   │   └── not-found.js
│   ├── components/
│   │   ├── Navbar.js
│   │   ├── ProductCard.js
│   │   ├── SearchAndFilter.js
│   │   ├── AuthForm.js
│   │   ├── ProductForm.js
│   │   └── ProtectedRoute.js
│   ├── context/
│   │   └── AuthContext.js
│   ├── hooks/
│   │   ├── useAuth.js
│   │   └── useProducts.js
│   ├── lib/
│   │   └── api.js
│   ├── styles/
│   │   └── globals.css
├── public/
│   ├── favicon.ico
│   ├── vercel.svg
│   └── next.svg
├── .env.local
├── .eslintrc.json
├── .gitignore
├── package.json
├── next.config.mjs
├── postcss.config.js

johnd
m38rmF$



// src/app/dashboard/page.js
'use client'
import { useState, useEffect } from 'react'
import { useSearchParams, useRouter } from 'next/navigation'
import { useAuth } from '@/context/AuthContext'

export default function DashboardPage() {
  const [product, setProduct] = useState({
    title: '',
    price: '',
    description: '',
    category: 'electronics',
    image: ''
  })
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState('')
  const searchParams = useSearchParams()
  const id = searchParams.get('id')
  const { isAdmin } = useAuth()
  const router = useRouter()

  useEffect(() => {
    if (!isAdmin()) {
      router.push('/')
      return
    }

    if (id) {
      const fetchProduct = async () => {
        setLoading(true)
        try {
          const response = await fetch(`https://fakestoreapi.com/products/${id}`)
          if (!response.ok) throw new Error('Failed to fetch product')
          const data = await response.json()
          setProduct({
            title: data.title,
            price: data.price.toString(),
            description: data.description,
            category: data.category,
            image: data.image
          })
          setLoading(false)
        } catch (err) {
          setError(err.message)
          setLoading(false)
        }
      }
      fetchProduct()
    }
  }, [id, isAdmin, router])

  const handleSubmit = async (e) => {
    e.preventDefault()
    setLoading(true)
    setError('')
    
    try {
      const url = id 
        ? `https://fakestoreapi.com/products/${id}`
        : 'https://fakestoreapi.com/products'
      
      const method = id ? 'PUT' : 'POST'
      
      const response = await fetch(url, {
        method,
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          ...product,
          price: parseFloat(product.price)
        })
      })
      
      if (!response.ok) throw new Error(id ? 'Failed to update product' : 'Failed to create product')
      
      router.push('/products')
    } catch (err) {
      setError(err.message)
      setLoading(false)
    }
  }

  const handleChange = (e) => {
    const { name, value } = e.target
    setProduct(prev => ({
      ...prev,
      [name]: value
    }))
  }

  const categories = [
    'electronics',
    'jewelery',
    "men's clothing",
    "women's clothing"
  ]

  if (!isAdmin()) return null

  return (
    <div className="dashboard-container">
      <div className="dashboard-card">
        <h1 className="dashboard-title">
          {id ? 'Edit Product' : 'Add New Product'}
        </h1>
        {error && <p className="error-message">{error}</p>}
        <form onSubmit={handleSubmit} className="dashboard-form">
          <div className="form-group">
            <label htmlFor="title" className="form-label">
              Title
            </label>
            <input
              type="text"
              id="title"
              name="title"
              value={product.title}
              onChange={handleChange}
              className="form-input"
              required
            />
          </div>
          <div className="form-group">
            <label htmlFor="price" className="form-label">
              Price
            </label>
            <input
              type="number"
              id="price"
              name="price"
              value={product.price}
              onChange={handleChange}
              min="0"
              step="0.01"
              className="form-input"
              required
            />
          </div>
          <div className="form-group">
            <label htmlFor="description" className="form-label">
              Description
            </label>
            <textarea
              id="description"
              name="description"
              value={product.description}
              onChange={handleChange}
              rows="4"
              className="form-textarea"
              required
            ></textarea>
          </div>
          <div className="form-group">
            <label htmlFor="category" className="form-label">
              Category
            </label>
            <select
              id="category"
              name="category"
              value={product.category}
              onChange={handleChange}
              className="form-select"
            >
              {categories.map(cat => (
                <option key={cat} value={cat}>
                  {cat.charAt(0).toUpperCase() + cat.slice(1)}
                </option>
              ))}
            </select>
          </div>
          <div className="form-group">
            <label htmlFor="image" className="form-label">
              Image URL
            </label>
            <input
              type="url"
              id="image"
              name="image"
              value={product.image}
              onChange={handleChange}
              className="form-input"
              required
            />
          </div>
          <button
            type="submit"
            disabled={loading}
            className="submit-button"
          >
            {loading ? 'Processing...' : (id ? 'Update Product' : 'Add Product')}
          </button>
        </form>
      </div>
    </div>
  )
}


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// src/app/login/page.js
// src/app/login/page.js
'use client'
import { useState } from 'react'
import { useRouter } from 'next/navigation'
import { useAuth } from '@/context/AuthContext'

export default function LoginPage() {
  const [error, setError] = useState('')
  const [credentials, setCredentials] = useState({ username: '', password: '' })
  const { login } = useAuth()
  const router = useRouter()

  const handleChange = (e) => {
    const { name, value } = e.target
    setCredentials(prev => ({ ...prev, [name]: value }))
  }

  const handleLogin = async (e) => {
    e.preventDefault()
    setError('')
    if (!credentials.username || !credentials.password) {
      setError('Veuillez remplir tous les champs.')
      return
    }
    const success = await login(credentials)
    if (success) {
      router.push('/products')
    } else {
      setError('Identifiants invalides. Veuillez réessayer.')
    }
  }

  return (
    <div className="login-container">
      <div className="login-card">
        <h1 className="login-title">Connexion</h1>
        {error && <p className="error-message">{error}</p>}
        <form onSubmit={handleLogin} className="login-form">
          <div className="form-group">
            <label htmlFor="username" className="form-label">Nom d'utilisateur</label>
            <input
              type="text"
              id="username"
              name="username"
              value={credentials.username}
              onChange={handleChange}
              className="form-input"
              required
            />
          </div>
          <div className="form-group">
            <label htmlFor="password" className="form-label">Mot de passe</label>
            <input
              type="password"
              id="password"
              name="password"
              value={credentials.password}
              onChange={handleChange}
              className="form-input"
              required
            />
          </div>
          <button type="submit" className="login-button">Se connecter</button>
        </form>
      </div>
    </div>
  )
}
//////////////////////////////////////////////////////////////////////////////////////////////
// src/app/product/[id]/page.js
// src/app/product/[id]/page.js
'use client'
import { useState, useEffect } from 'react'
import { useParams, useRouter } from 'next/navigation'
import { useAuth } from '@/context/AuthContext'
import Image from 'next/image'

export default function ProductDetailPage() {
  const { id } = useParams()
  const [product, setProduct] = useState(null)
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState('')
  const { user, isAdmin } = useAuth()
  const router = useRouter()

  useEffect(() => {
    const fetchProduct = async () => {
      try {
        const response = await fetch(`https://fakestoreapi.com/products/${id}`)
        if (!response.ok) throw new Error('Produit non trouvé')
        const data = await response.json()
        setProduct(data)
        setLoading(false)
      } catch (err) {
        setError(err.message)
        setLoading(false)
      }
    }
    fetchProduct()
  }, [id])

  const handleDelete = async () => {
    if (!window.confirm('Êtes-vous sûr de vouloir supprimer ce produit ?')) return
    try {
      const response = await fetch(`https://fakestoreapi.com/products/${id}`, { method: 'DELETE' })
      if (!response.ok) throw new Error('Échec de la suppression')
      router.push('/products')
    } catch (err) {
      console.error('Erreur lors de la suppression:', err)
      alert('Échec de la suppression')
    }
  }

  if (loading) return <div className="text-center py-10">Chargement...</div>
  if (error) return <div className="text-center py-10 text-red-500">{error}</div>

  return (
    <div className="max-w-4xl mx-auto py-8 px-4">
      <div className="flex flex-col md:flex-row gap-8">
        <div className="md:w-1/2">
          <Image src={product.image} alt={product.title} width={400} height={400} className="rounded-lg" />
        </div>
        <div className="md:w-1/2">
          <h1 className="text-3xl font-bold mb-4">{product.title}</h1>
          <p className="text-xl font-bold mb-6">${product.price}</p>
          <p className="text-gray-700 mb-6">{product.description}</p>
          <div className="mb-6">
            <span className="bg-blue-100 text-blue-800 px-3 py-1 rounded-full text-sm">
              {product.category}
            </span>
          </div>
          {isAdmin() && (
            <div className="flex gap-4 mt-8">
              <button
                onClick={() => router.push(`/dashboard?id=${product.id}`)}
                className="bg-yellow-500 text-white px-4 py-2 rounded hover:bg-yellow-600"
              >
                Modifier
              </button>
              <button
                onClick={handleDelete}
                className="bg-red-500 text-white px-4 py-2 rounded hover:bg-red-600"
              >
                Supprimer
              </button>
            </div>
          )}
        </div>
      </div>
    </div>
  )
}
//////////////////////////////////////////////////////////////////////////////////////////////////
// src/app/products/page.js
// src/app/products/page.js
'use client'
import { useState, useEffect } from 'react'
import { useRouter } from 'next/navigation'
import { useAuth } from '@/context/AuthContext'
import ProductCard from '@/components/ProductCard'
import SearchAndFilter from '@/components/SearchAndFilter'

export default function ProductsPage() {
  const [products, setProducts] = useState([])
  const [filteredProducts, setFilteredProducts] = useState([])
  const [categories, setCategories] = useState([])
  const [loading, setLoading] = useState(true)
  const { user, isAdmin } = useAuth()
  const router = useRouter()

  useEffect(() => {
    const fetchData = async () => {
      try {
        const [productsRes, categoriesRes] = await Promise.all([
          fetch('https://fakestoreapi.com/products'),
          fetch('https://fakestoreapi.com/products/categories')
        ])
        const productsData = await productsRes.json()
        const categoriesData = await categoriesRes.json()
        setProducts(productsData)
        setFilteredProducts(productsData)
        setCategories(categoriesData)
        setLoading(false)
      } catch (error) {
        console.error('Erreur lors du chargement des données:', error)
        setLoading(false)
      }
    }
    fetchData()
  }, [])

  const handleSearch = (searchTerm, category) => {
    let filtered = [...products]
    if (searchTerm) {
      filtered = filtered.filter(product =>
        product.title.toLowerCase().includes(searchTerm.toLowerCase())
      )
    }
    if (category && category !== 'all') {
      filtered = filtered.filter(product => product.category === category)
    }
    setFilteredProducts(filtered)
  }

  const handleReset = () => {
    setFilteredProducts(products)
  }

  return (
    <div className="py-8">
      <div className="flex justify-between items-center mb-8">
        <h1 className="text-3xl font-bold">Nos Produits</h1>
        {isAdmin() && (
          <button
            onClick={() => router.push('/dashboard')}
            className="bg-green-600 text-white px-4 py-2 rounded hover:bg-green-700"
          >
            Ajouter un produit
          </button>
        )}
      </div>
      <SearchAndFilter categories={categories} onSearch={handleSearch} onReset={handleReset} />
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6 mt-8">
        {filteredProducts.length > 0 ? (
          filteredProducts.map(product => (
            <ProductCard key={product.id} product={product} />
          ))
        ) : (
          <p className="col-span-full text-center py-10">Aucun produit trouvé.</p>
        )}
      </div>
    </div>
  )
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// src/app/global-error.js
'use client'

export default function GlobalError({ error, reset }) {
  return (
    <html>
      <body>
        <div className="text-center py-20">
          <h1 className="text-4xl font-bold mb-4">Something went wrong!</h1>
          <p className="text-xl mb-6">{error.message}</p>
          <button
            onClick={() => reset()}
            className="bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 transition"
          >
            Try again
          </button>
        </div>
      </body>
    </html>
  )
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// src/app/not-found.js
import Link from 'next/link'

export default function NotFound() {
  return (
    <div className="text-center py-20">
      <h1 className="text-4xl font-bold mb-4">404 - Page Not Found</h1>
      <p className="text-xl mb-6">The page you are looking for does not exist.</p>
      <Link 
        href="/" 
        className="bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 transition"
      >
        Return Home
      </Link>
    </div>
  )
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// src/app/page.js
import Link from 'next/link'

export default function Home() {
  return (
    <div className="text-center py-20">
      <h1 className="text-4xl font-bold mb-6">Welcome to FakeStore</h1>
      <p className="text-xl mb-8">Explore our amazing products collection</p>
      <Link 
        href="/products" 
        className="bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 transition"
      >
        Browse Products
      </Link>
    </div>
  )
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// src/components/AuthForm.js
'use client'
import { useState } from 'react'

export default function AuthForm({ onSubmit, isLogin }) {
  const [credentials, setCredentials] = useState({
    username: '',
    password: ''
  })

  const handleChange = (e) => {
    const { name, value } = e.target
    setCredentials(prev => ({
      ...prev,
      [name]: value
    }))
  }

  const handleSubmit = (e) => {
    e.preventDefault()
    onSubmit(credentials)
  }

  return (
    <form onSubmit={handleSubmit} className="space-y-4">
      <div>
        <label htmlFor="username" className="block text-sm font-medium text-gray-700">
          Username
        </label>
        <input
          type="text"
          id="username"
          name="username"
          value={credentials.username}
          onChange={handleChange}
          className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
          required
        />
      </div>
      <div>
        <label htmlFor="password" className="block text-sm font-medium text-gray-700">
          Password
        </label>
        <input
          type="password"
          id="password"
          name="password"
          value={credentials.password}
          onChange={handleChange}
          className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
          required
        />
      </div>
      <div>
        <button
          type="submit"
          className="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
        >
          {isLogin ? 'Login' : 'Register'}
        </button>
      </div>
    </form>
  )
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// src/components/Navbar.js
'use client'
import Link from 'next/link'
import { useAuth } from '@/context/AuthContext'
import { useRouter } from 'next/navigation'
import { useEffect, useState } from 'react'

export default function Navbar() {
  const { user, logout, isAdmin } = useAuth()
  const router = useRouter()
  const [isMenuOpen, setIsMenuOpen] = useState(false)

  const handleLogout = () => {
    logout()
    router.push('/')
    setIsMenuOpen(false)
  }

  return (
    <header className="navbar">
      <div className="navbar-container">
        <Link href="/" className="logo" onClick={() => setIsMenuOpen(false)}>
          FakeStore
        </Link>

        {/* Menu Desktop */}
        <nav className="desktop-nav">
          <Link href="/products" className="nav-link">
            Products
          </Link>
          
          {user ? (
            <>
              {isAdmin() && (
                <Link href="/dashboard" className="nav-link">
                  Dashboard
                </Link>
              )}
              <div className="user-menu">
                <span className="username">Hi, {user.username}</span>
                <button onClick={handleLogout} className="logout-btn">
                  Logout
                </button>
              </div>
            </>
          ) : (
            <Link href="/login" className="login-btn">
              Login
            </Link>
          )}
        </nav>

        {/* Bouton Menu Mobile */}
        <button 
          className="mobile-menu-btn"
          onClick={() => setIsMenuOpen(!isMenuOpen)}
          aria-label="Toggle menu"
        >
          <span className={`bar ${isMenuOpen ? 'open' : ''}`}></span>
          <span className={`bar ${isMenuOpen ? 'open' : ''}`}></span>
          <span className={`bar ${isMenuOpen ? 'open' : ''}`}></span>
        </button>

        {/* Overlay Mobile */}
        <div 
          className={`mobile-nav-overlay ${isMenuOpen ? 'open' : ''}`} 
          onClick={() => setIsMenuOpen(false)}
        />

        {/* Menu Mobile */}
        <nav className={`mobile-nav ${isMenuOpen ? 'open' : ''}`}>
          <Link 
            href="/products" 
            className="nav-link"
            onClick={() => setIsMenuOpen(false)}
          >
            Products
          </Link>
          
          {user && isAdmin() && (
            <Link 
              href="/dashboard" 
              className="nav-link"
              onClick={() => setIsMenuOpen(false)}
            >
              Dashboard
            </Link>
          )}

          {user ? (
            <div className="mobile-user-menu">
              <span className="username">Connected as: {user.username}</span>
              <button 
                onClick={handleLogout} 
                className="logout-btn"
              >
                Logout
              </button>
            </div>
          ) : (
            <Link 
              href="/login" 
              className="login-btn"
              onClick={() => setIsMenuOpen(false)}
            >
              Login
            </Link>
          )}
        </nav>
      </div>
    </header>
  )
}
////////////////////////////////////////////////////////////////////////////////////////
// src/components/ProductCard.js
import Image from 'next/image'
import Link from 'next/link'
import styles from '../styles/globals.css'

export default function ProductCard({ product }) {
  return (
    <div className="card">
      <div className="image-container">
        <Image
          src={product.image}
          alt={product.title}
          fill
          className="object-contain"
        />
      </div>
      <div className="p-4">
        <h3 className="font-semibold text-lg mb-2" style={{ height: '3em', overflow: 'hidden' }}>
          {product.title}
        </h3>
        <div className="flex justify-between items-center mb-2">
          <span className="font-bold text-lg">${product.price}</span>
          <span className="bg-blue-100 text-blue-800 text-xs px-2 py-1 rounded">
            {product.category}
          </span>
        </div>
        <div className="flex items-center mb-3">
          <span style={{ color: '#f59e0b', marginRight: '0.25rem' }}>★</span>
          <span>{product.rating.rate} ({product.rating.count} reviews)</span>
        </div>
        <Link
          href={`/product/${product.id}`}
          className="btn btn-primary block w-full text-center"
        >
          View Details
        </Link>
      </div>
    </div>
  )
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////
// src/components/ProductForm.js
'use client'
import { useState, useEffect } from 'react'

export default function ProductForm({ product, onSubmit, loading }) {
  const [formData, setFormData] = useState({
    title: '',
    price: '',
    description: '',
    category: 'electronics',
    image: ''
  })

  useEffect(() => {
    if (product) {
      setFormData({
        title: product.title,
        price: product.price.toString(),
        description: product.description,
        category: product.category,
        image: product.image
      })
    }
  }, [product])

  const handleChange = (e) => {
    const { name, value } = e.target
    setFormData(prev => ({
      ...prev,
      [name]: value
    }))
  }

  const handleSubmit = (e) => {
    e.preventDefault()
    onSubmit({
      ...formData,
      price: parseFloat(formData.price)
    })
  }

  const categories = [
    'electronics',
    'jewelery',
    "men's clothing",
    "women's clothing"
  ]

  return (
    <form onSubmit={handleSubmit} className="space-y-4">
      <div>
        <label htmlFor="title" className="block text-sm font-medium text-gray-700">
          Title
        </label>
        <input
          type="text"
          id="title"
          name="title"
          value={formData.title}
          onChange={handleChange}
          className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
          required
        />
      </div>
      <div>
        <label htmlFor="price" className="block text-sm font-medium text-gray-700">
          Price
        </label>
        <input
          type="number"
          id="price"
          name="price"
          value={formData.price}
          onChange={handleChange}
          min="0"
          step="0.01"
          className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
          required
        />
      </div>
      <div>
        <label htmlFor="description" className="block text-sm font-medium text-gray-700">
          Description
        </label>
        <textarea
          id="description"
          name="description"
          value={formData.description}
          onChange={handleChange}
          rows="4"
          className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
          required
        ></textarea>
      </div>
      <div>
        <label htmlFor="category" className="block text-sm font-medium text-gray-700">
          Category
        </label>
        <select
          id="category"
          name="category"
          value={formData.category}
          onChange={handleChange}
          className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
        >
          {categories.map(cat => (
            <option key={cat} value={cat}>
              {cat.charAt(0).toUpperCase() + cat.slice(1)}
            </option>
          ))}
        </select>
      </div>
      <div>
        <label htmlFor="image" className="block text-sm font-medium text-gray-700">
          Image URL
        </label>
        <input
          type="url"
          id="image"
          name="image"
          value={formData.image}
          onChange={handleChange}
          className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
          required
        />
      </div>
      <div>
        <button
          type="submit"
          disabled={loading}
          className="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:bg-blue-400"
        >
          {loading ? 'Processing...' : (product ? 'Update Product' : 'Add Product')}
        </button>
      </div>
    </form>
  )
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// src/components/SearchAndFilter.js
'use client'
import { useState } from 'react'

export default function SearchAndFilter({ categories, onSearch }) {
  const [searchTerm, setSearchTerm] = useState('')
  const [selectedCategory, setSelectedCategory] = useState('all')

  const handleSearch = (e) => {
    e.preventDefault()
    onSearch(searchTerm, selectedCategory)
  }

  return (
    <form onSubmit={handleSearch} className="flex flex-col md:flex-row gap-4 mb-6">
      <input
        type="text"
        placeholder="Search products..."
        value={searchTerm}
        onChange={(e) => setSearchTerm(e.target.value)}
        className="flex-grow px-4 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
      />
      <select
        value={selectedCategory}
        onChange={(e) => setSelectedCategory(e.target.value)}
        className="px-4 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
      >
        <option value="all">All Categories</option>
        {categories.map(category => (
          <option key={category} value={category}>
            {category.charAt(0).toUpperCase() + category.slice(1)}
          </option>
        ))}
      </select>
      <button
        type="submit"
        className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition"
      >
        Search
      </button>
    </form>
  )
}
///////////////////////////////////////////////////////////////////////////////////////////////////////
// src/context/AuthContext.js
'use client'
import { createContext, useContext, useState, useEffect } from 'react'
import { useRouter } from 'next/navigation'

const AuthContext = createContext()

export function AuthProvider({ children }) {
  const [user, setUser] = useState(null)
  const [loading, setLoading] = useState(true)
  const router = useRouter()

  useEffect(() => {
    const storedUser = localStorage.getItem('user')
    if (storedUser) {
      setUser(JSON.parse(storedUser))
    }
    setLoading(false)
  }, [])

  const login = async (credentials) => {
    try {
      const response = await fetch('https://fakestoreapi.com/auth/login', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(credentials)
      })
      
      if (!response.ok) throw new Error('Login failed')
      
      const token = await response.json()
      
      // Fetch user details
      const userResponse = await fetch('https://fakestoreapi.com/users')
      const users = await userResponse.json()
      const authenticatedUser = users.find(u => u.username === credentials.username)
      
      if (!authenticatedUser) throw new Error('User not found')
      
      const userWithToken = { ...authenticatedUser, token }
      setUser(userWithToken)
      localStorage.setItem('user', JSON.stringify(userWithToken))
      return true
    } catch (error) {
      console.error('Login error:', error)
      return false
    }
  }

  const logout = () => {
    setUser(null)
    localStorage.removeItem('user')
    router.push('/')
  }

  const isAdmin = () => {
    return user?.username === 'johnd' // Simple admin check for demo
  }

  return (
    <AuthContext.Provider value={{ user, login, logout, isAdmin, loading }}>
      {children}
    </AuthContext.Provider>
  )
}

export function useAuth() {
  return useContext(AuthContext)
}
///////////////////////////////////////////////////////////////////////////
/* src/styles/globals.css */
/* Reset et styles de base */
body {
    margin: 0;
    padding: 0;
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
    background-color: #f8fafc;
    color: #333;
    line-height: 1.6;
  }
  
  /* Layout */
  .container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 20px;
  }
  
  /* Typographie */
  h1, h2, h3, h4 {
    margin: 0 0 1rem 0;
    line-height: 1.2;
  }
  
  h1 {
    font-size: 2.5rem;
  }
  
  h2 {
    font-size: 2rem;
  }
  
  h3 {
    font-size: 1.5rem;
  }
  
  /* Liens */
  a {
    color: #3b82f6;
    text-decoration: none;
  }
  
  a:hover {
    text-decoration: underline;
  }
  
  /* Boutons */
  .btn {
    display: inline-block;
    padding: 0.5rem 1rem;
    border-radius: 0.375rem;
    font-weight: 500;
    text-align: center;
    transition: all 0.2s;
    cursor: pointer;
  }
  
  .btn-primary {
    background-color: #3b82f6;
    color: white;
    border: 1px solid #3b82f6;
  }
  
  .btn-primary:hover {
    background-color: #2563eb;
    border-color: #2563eb;
  }
  
  .btn-danger {
    background-color: #ef4444;
    color: white;
    border: 1px solid #ef4444;
  }
  
  .btn-danger:hover {
    background-color: #dc2626;
    border-color: #dc2626;
  }
  
  .btn-secondary {
    background-color: #e5e7eb;
    color: #333;
    border: 1px solid #d1d5db;
  }
  
  .btn-secondary:hover {
    background-color: #d1d5db;
  }
  
  /* Formulaires */
  .form-control {
    display: block;
    width: 100%;
    padding: 0.5rem 0.75rem;
    font-size: 1rem;
    line-height: 1.5;
    color: #333;
    background-color: #fff;
    background-clip: padding-box;
    border: 1px solid #d1d5db;
    border-radius: 0.375rem;
    transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
  }
  
  .form-control:focus {
    border-color: #3b82f6;
    outline: 0;
    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.25);
  }
  
  .form-label {
    display: block;
    margin-bottom: 0.5rem;
    font-weight: 500;
  }
  
  /* Cartes */
  .card {
    background: white;
    border-radius: 0.5rem;
    overflow: hidden;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    transition: transform 0.2s, box-shadow 0.2s;
  }
  
  .card:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  }
  
  /* Grille */
  .grid {
    display: grid;
    gap: 1.5rem;
  }
  
  .grid-cols-1 {
    grid-template-columns: repeat(1, 1fr);
  }
  
  .grid-cols-2 {
    grid-template-columns: repeat(2, 1fr);
  }
  
  .grid-cols-3 {
    grid-template-columns: repeat(3, 1fr);
  }
  
  .grid-cols-4 {
    grid-template-columns: repeat(4, 1fr);
  }
  
  @media (max-width: 1024px) {
    .grid-cols-4 {
      grid-template-columns: repeat(3, 1fr);
    }
  }
  
  @media (max-width: 768px) {
    .grid-cols-4, .grid-cols-3 {
      grid-template-columns: repeat(2, 1fr);
    }
  }
  
  @media (max-width: 640px) {
    .grid-cols-4, .grid-cols-3, .grid-cols-2 {
      grid-template-columns: 1fr;
    }
  }
  
  /* Utilitaires */
  .text-center {
    text-align: center;
  }
  
  .text-red {
    color: #ef4444;
  }
  
  .text-blue {
    color: #3b82f6;
  }
  
  .bg-blue-100 {
    background-color: #dbeafe;
  }
  
  .text-blue-800 {
    color: #1e40af;
  }
  
  .p-4 {
    padding: 1rem;
  }
  
  .py-8 {
    padding-top: 2rem;
    padding-bottom: 2rem;
  }
  
  .px-4 {
    padding-left: 1rem;
    padding-right: 1rem;
  }
  
  .mb-4 {
    margin-bottom: 1rem;
  }
  
  .mb-6 {
    margin-bottom: 1.5rem;
  }
  
  .mb-8 {
    margin-bottom: 2rem;
  }
  
  .rounded-lg {
    border-radius: 0.5rem;
  }
  
  .flex {
    display: flex;
  }
  
  .justify-between {
    justify-content: space-between;
  }
  
  .items-center {
    align-items: center;
  }
  
  .gap-4 {
    gap: 1rem;
  }
  
  /* Navigation */
  .navbar {
    background: white;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    padding: 1rem 0;
  }
  
  .navbar-container {
    display: flex;
    justify-content: space-between;
    align-items: center;
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 20px;
  }
  
  /* Animation */
  @keyframes spin {
    to { transform: rotate(360deg); }
  }
  
  .animate-spin {
    animation: spin 1s linear infinite;
  }
  
  /* Image container */
  .image-container {
    position: relative;
    height: 12rem;
  }
  
  .image-container img {
    object-fit: contain;
    padding: 1rem;
  }
/* Ajoutez ces styles à src/styles/globals.css */

/* Login Page Styles */
.login-container {
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: 80vh;
    padding: 2rem;
  }
  
  .login-card {
    background: white;
    border-radius: 8px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    padding: 2rem;
    width: 100%;
    max-width: 400px;
  }
  
  .login-title {
    font-size: 1.75rem;
    font-weight: 600;
    color: #333;
    text-align: center;
    margin-bottom: 1.5rem;
  }
  
  .login-form {
    display: flex;
    flex-direction: column;
    gap: 1.25rem;
  }
  
  .login-button {
    background-color: #3b82f6;
    color: white;
    padding: 0.75rem;
    border: none;
    border-radius: 6px;
    font-weight: 500;
    cursor: pointer;
    transition: background-color 0.2s;
  }
  
  .login-button:hover {
    background-color: #2563eb;
  }
  
  /* Dashboard Page Styles */
  .dashboard-container {
    padding: 2rem;
  }
  
  .dashboard-card {
    background: white;
    border-radius: 8px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    padding: 2rem;
    max-width: 800px;
    margin: 0 auto;
  }
  
  .dashboard-title {
    font-size: 1.75rem;
    font-weight: 600;
    color: #333;
    margin-bottom: 1.5rem;
  }
  
  .dashboard-form {
    display: flex;
    flex-direction: column;
    gap: 1.25rem;
  }
  
  .form-group {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }
  
  .form-label {
    font-weight: 500;
    color: #333;
  }
  
  .form-input, .form-select, .form-textarea {
    padding: 0.75rem;
    border: 1px solid #d1d5db;
    border-radius: 6px;
    font-size: 1rem;
    transition: border-color 0.2s;
  }
  
  .form-input:focus, .form-select:focus, .form-textarea:focus {
    border-color: #3b82f6;
    outline: none;
    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
  }
  
  .form-textarea {
    resize: vertical;
    min-height: 100px;
  }
  
  .submit-button {
    background-color: #3b82f6;
    color: white;
    padding: 0.75rem;
    border: none;
    border-radius: 6px;
    font-weight: 500;
    cursor: pointer;
    transition: background-color 0.2s;
    margin-top: 1rem;
  }
  
  .submit-button:hover {
    background-color: #2563eb;
  }
  
  .submit-button:disabled {
    background-color: #93c5fd;
    cursor: not-allowed;
  }
  
  /* Error Message */
  .error-message {
    color: #ef4444;
    padding: 0.5rem;
    background-color: #fee2e2;
    border-radius: 4px;
    margin-bottom: 1rem;
    text-align: center;
  }  
/* Navbar Styles */
.navbar {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    background-color: white;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    z-index: 1000;
    transition: all 0.3s ease;
  }
  
  .navbar.scrolled {
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
  }
  
  .container {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1rem 2rem;
    max-width: 1200px;
    margin: 0 auto;
  }
  
  .logo {
    font-size: 1.5rem;
    font-weight: 700;
    color: #3b82f6;
    text-decoration: none;
  }
  
  /* Desktop Navigation */
  .desktop-nav {
    display: flex;
    align-items: center;
    gap: 1.5rem;
  }
  
  .nav-link {
    color: #333;
    text-decoration: none;
    font-weight: 500;
    padding: 0.5rem 0;
    position: relative;
    transition: color 0.3s;
  }
  
  .nav-link:hover {
    color: #3b82f6;
  }
  
  .nav-link::after {
    content: '';
    position: absolute;
    bottom: 0;
    left: 0;
    width: 0;
    height: 2px;
    background-color: #3b82f6;
    transition: width 0.3s;
  }
  
  .nav-link:hover::after {
    width: 100%;
  }
  
  .user-menu {
    display: flex;
    align-items: center;
    gap: 1rem;
  }
  
  .username {
    font-size: 0.9rem;
    color: #666;
  }
  
  .login-btn, .logout-btn {
    padding: 0.5rem 1rem;
    border-radius: 4px;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.3s;
  }
  
  .login-btn {
    background-color: #3b82f6;
    color: white;
    border: none;
  }
  
  .login-btn:hover {
    background-color: #2563eb;
  }
  
  .logout-btn {
    background-color: #f8fafc;
    color: #ef4444;
    border: 1px solid #ef4444;
  }
  
  .logout-btn:hover {
    background-color: #ef4444;
    color: white;
  }
  
  /* Mobile Navigation */
  .mobile-menu-btn {
    display: none;
    background: none;
    border: none;
    cursor: pointer;
    padding: 0.5rem;
    z-index: 1001;
  }
  
  .bar {
    display: block;
    width: 25px;
    height: 2px;
    margin: 5px auto;
    background-color: #333;
    transition: all 0.3s ease;
  }
  
  .bar.open:nth-child(1) {
    transform: translateY(7px) rotate(45deg);
  }
  
  .bar.open:nth-child(2) {
    opacity: 0;
  }
  
  .bar.open:nth-child(3) {
    transform: translateY(-7px) rotate(-45deg);
  }
  
  .mobile-nav-overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: rgba(0, 0, 0, 0.5);
    z-index: 999;
    opacity: 0;
    visibility: hidden;
    transition: all 0.3s;
  }
  
  .mobile-nav-overlay.open {
    opacity: 1;
    visibility: visible;
  }
  
  .mobile-nav {
    position: fixed;
    top: 0;
    right: -100%;
    width: 80%;
    max-width: 300px;
    height: 100vh;
    background-color: white;
    z-index: 1000;
    padding: 2rem;
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
    transition: right 0.3s ease;
  }
  
  .mobile-nav.open {
    right: 0;
  }
  
  .mobile-user-menu {
    margin-top: auto;
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }
  
  /* Responsive */
  @media (max-width: 768px) {
    .desktop-nav {
      display: none;
    }
  
    .mobile-menu-btn {
      display: block;
    }
  
    .container {
      padding: 1rem;
    }
  }  
